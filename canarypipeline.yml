#poc for lambda canary deployments
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  GHToken:
    Type: AWS::SSM::Parameter::Value<String>
    Default: token
  ServiceName:
    Type: String
    Default: Canary

Resources:
  
  GithubWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: GHToken
      Filters:
        - JsonPath: $.ref
          MatchEquals: refs/heads/{Branch}
      TargetAction: Source
      TargetPipeline: !Ref Pipeline
      TargetPipelineVersion: 1
      RegisterWithThirdParty: true

  CodePipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
                - cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                  - iam:GetRole
                  - iam:PutRolePolicy
                  - sts:AssumeRole
                Resource: "*"
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource:
                  - !GetAtt CanaryBuild.Arn
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub "${ArtifactBucket.Arn}/*"
                  - !GetAtt ArtifactBucket.Arn
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateStack
                Resource:
                  - !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ServiceName}Service*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt ServiceStackRole.Arn
          PolicyName: AllPermissions
      RoleName: !Sub "${ServiceName}CodePipelineRole"

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
                - ecs.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !GetAtt ArtifactBucket.Arn
                  - !Join ['', [!GetAtt ArtifactBucket.Arn, "/*"]]
          PolicyName: !Sub "${ServiceName}CodeBuildS3Permissions"
      RoleName: !Sub "${ServiceName}CodeBuildRole"

  AdministerPipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !GetAtt CodePipelineExecutionRole.Arn
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DescribeStacks
                  - s3:GetObject
                  - ssm:GetParameters
                  - cloudformation:CreateChangeSet
                  - codepipeline:DeletePipeline
                  - codepipeline:DeregisterWebhookWithThirdParty
                  - s3:DeleteBucket
                  - codepipeline:GetPipeline
                  - codepipeline:DeleteWebhook
                  - iam:GetRole
                  - iam:DeleteRolePolicy
                Resource: "*"
              - Effect: Allow
                Action:
                  - codebuild:BatchGetProjects
                  - codebuild:DeleteProject
                Resource:
                  - !GetAtt CanaryBuild.Arn
              - Effect: Allow
                Action:
                  - s3:DeleteBucket
                Resource:
                  - !GetAtt ArtifactBucket.Arn
              - Effect: Allow
                Action:
                  - iam:DeleteRolePolicy
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ServiceName}*'
          PolicyName: !Sub "${ServiceName}PipelineAdministrationPolicy"
      RoleName: !Sub "${ServiceName}PipelineAdministrationRole"
  
  AdministerPipelineIAMPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iam:*
            Resource: !GetAtt AdministerPipelineRole.Arn
          - Effect: Allow
            Action:
              - iam:CreateRole
              - iam:PassRole
            Resource: "*"
          - Effect: Allow
            Action:
              - iam:DeleteRole
              - iam:DeleteRolePolicy
              - iam:PutRolePolicy
            Resource:
              - !GetAtt ServiceStackRole.Arn
              - !GetAtt CodeBuildServiceRole.Arn
              - !GetAtt CodePipelineExecutionRole.Arn
          - Effect: Allow
            Action:
              - lambda:UpdateFunctionCode
              - lambda:DeleteFunction
            Resource:
              - !GetAtt WebhookFunction.Arn 
      PolicyName: AdministerPipelineIAMPolicy
      Roles:
        - !Ref AdministerPipelineRole

  ServiceStackRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub 
                    - "${ArtifactBucketArn}/*"
                    - { ArtifactBucketArn: !GetAtt ArtifactBucket.Arn}
              - Effect: Allow
                Action: 
                  - iam:GetRole
                  - iam:CreateRole
                  - iam:DetachRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:DeleteRole
                  - iam:AttachRolePolicy
                  - iam:PutRolePolicy
                  - iam:PassRole 
                  - iam:GetRolePolicy
                Resource: 
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${ServiceName}Service*'
              - Effect: Allow
                Action: 
                  - iam:CreateServiceLinkedRole
                  - cloudformation:CreateChangeSet
                  - codedeploy:CreateApplication 
                  - codedeploy:DeleteApplication
                  - codedeploy:CreateDeploymentGroup
                  - codedeploy:DeleteDeploymentGroup
                  - codedeploy:CreateDeployment 
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:GetDeploymentGroup
                  - codedeploy:RegisterApplicationRevision
                  - lambda:GetFunction
                  - lambda:CreateFunction
                  - lambda:DeleteFunction
                  - lambda:ListVersionsByFunction
                  - lambda:PublishVersion
                  - lambda:GetAlias
                  - lambda:CreateAlias
                  - lambda:DeleteAlias
                  - lambda:AddPermission
                  - lambda:RemovePermission
                  - lambda:UpdateFunctionCode
                  - lambda:ListTags
                  - lambda:TagResource
                  - lambda:UntagResource
                  - apigateway:POST
                  - apigateway:PATCH
                  - apigateway:DELETE
                  - apigateway:GET
                Resource: "*"
          PolicyName: !Sub "${ServiceName}ServiceStackPolicy"
      RoleName: !Sub "${ServiceName}ServiceStackRole"

  CanaryBuild:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts: 
        Type: CODEPIPELINE
      Description: Canary Build Project
      Environment: 
        EnvironmentVariables:
          - Name: template_file
            Type: PLAINTEXT
            Value: canaryservice.yml
          - Name: package_bucket
            Type: PLAINTEXT
            Value: !Ref ArtifactBucket
          - Name: package_file
            Type: PLAINTEXT
            Value: canaryservice-package.yml
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
        PrivilegedMode: false
        Type: LINUX_CONTAINER
      LogsConfig: 
        CloudWatchLogs:
          Status: DISABLED
      Name: CanaryBuild
      QueuedTimeoutInMinutes: 20
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Source: 
        BuildSpec: code/buildspec.yml
        Type: CODEPIPELINE
      TimeoutInMinutes: 10

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineExecutionRole.Arn
      Stages:
        - Actions:
          - ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: '1'
            Configuration:
              Owner: ZhangMaKe
              Repo: CanaryLambda
              Branch: master
              OAuthToken: !Ref GHToken
              PollForSourceChanges: false
            Name: Source 
            OutputArtifacts:
              - Name: source
          Name: Source
        - Actions:
          - ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            Configuration:
              OutputFileName: pipelineStackOutput.json
              Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
              RoleArn: !GetAtt AdministerPipelineRole.Arn
              StackName: CanaryPipeline
              ActionMode: CREATE_UPDATE
              TemplatePath: source::canarypipeline.yml
            InputArtifacts:
              - Name: source
            RoleArn: !GetAtt AdministerPipelineRole.Arn
            RunOrder: 1
            Name: Stack
          Name: AdministerPipeline
        - Actions:
          - ActionTypeId:
              Category: Build
              Owner: AWS
              Provider: CodeBuild
              Version: '1'
            Configuration:
              ProjectName: CanaryBuild
            InputArtifacts:
              - Name: source
            Name: BuildCanaryFunction
            OutputArtifacts:
              - Name: code
            RoleArn: !GetAtt CodePipelineExecutionRole.Arn
            RunOrder: 1
          - ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            Configuration:
              OutputFileName: canaryServiceStackOutput.json
              Capabilities: CAPABILITY_NAMED_IAM,CAPABILITY_AUTO_EXPAND
              RoleArn: !GetAtt ServiceStackRole.Arn
              StackName: !Sub "${ServiceName}Service"
              ActionMode: CREATE_UPDATE
              TemplatePath: code::canaryservice-package.yml
            InputArtifacts:
              - Name: code
            RoleArn: !GetAtt CodePipelineExecutionRole.Arn
            RunOrder: 2
            Name: !Sub "${ServiceName}ServiceStack"
          Name: !Sub "${ServiceName}Service"
      ArtifactStores:
        - ArtifactStore:
            Location: !Ref ArtifactBucket
            Type: S3
          Region: us-east-1
      Name: !Sub "${ServiceName}Pipeline"

  ArtifactBucket:
    Type: AWS::S3::Bucket

  WebhookFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      FunctionName: WebhookFunction
      InlineCode: |
        import boto3
        import json
        from botocore.vendored import requests
        def handler(event, context):
          payload = {"text":"I am the pipeline"}
          url = ''
          response = requests.post(
            url,
            data = json.dumps(payload), 
            headers = {'Content-Type': 'application/json'}
          )
          return {
            'statusCode': 200
          }
