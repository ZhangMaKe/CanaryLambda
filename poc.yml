#poc for lambda canary deployments
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"
          PolicyName: XRayWriteAccess
      RoleName: CanaryLambdaExecutionRole

  LambdaExecutionXRayPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaExecutionXRayPolicy
      Roles:
        - !Ref LambdaExecutionRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"

  Api:
    Type: AWS::Serverless::Api
    Properties:
      EndpointConfiguration: REGIONAL
      Name: LambdaCanary
      StageName: prod
      TracingEnabled: true

  Function:
    DependsOn:
      - LambdaExecutionXRayPolicy
    Type: AWS::Serverless::Function 
    Properties:
      AutoPublishAlias: current
      DeploymentPreference:
        Enabled: true
        Type: Canary10Percent5Minutes
        # Hooks:
        #   PreTraffic: !Ref PreTrafficFunction
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: CanaryFunction
      InlineCode: |
        import json
        def handler(event, context):
          return {
            'statusCode': 200,
            'body': json.dumps('version 5')
          }
      Timeout: 60
      #Tracing: Active
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /canary
            Method: get
            RestApiId: !Ref Api

  PreTrafficFunction:
    DependsOn:
      - LambdaExecutionXRayPolicy
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: PreTrafficFunction
      InlineCode: |
        import json
        def handler(event, context):
          return {
            'statusCode': 200,
            'body': json.dumps('success')
          }
      Timeout: 60

  # CodeDeployExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: 
  #               - codedeploy.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action: "lambda:*"
  #               Resource: "*"
  #         PolicyName: LambdaAccess
  #     RoleName: CanaryCodeDeployExecutionRole

  # CodeDeployApp:
  #   Type: AWS::CodeDeploy::Application
  #   Properties:
  #     ApplicationName: CanaryLambdaApp
  #     ComputePlatform: Lambda

  # CodeDeployDeploymentGroup:
  #   Type: AWS::CodeDeploy::DeploymentGroup
  #   Properties:
  #     # AlarmConfiguration: 
  #     #   AlarmConfiguration
  #     ApplicationName: !Ref CodeDeployApp
  #     # AutoRollbackConfiguration: 
  #     #   AutoRollbackConfiguration
  #     # Deployment: 
  #     #   Description: DeploymentDesc
  #     #   IgnoreApplicationStopFailures: false
  #     #   Revision:
  #     #     RevisionType: AppSpecContent
  #     DeploymentConfigName: CodeDeployDefaultLambdaCanary10Percent5Minutes
  #     DeploymentGroupName: CanaryDeploymentGroup
  #     DeploymentStyle: 
  #       DeploymentOption: WITH_TRAFFIC_CONTROL
  #       DeploymentType: BLUE_GREEN
  #     ServiceRoleArn: !GetAtt CodeDeployExecutionRole.Arn
  #     # TriggerConfigurations: 
  #     #   - TriggerConfig
  
  CodePipelineExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "*"
                Resource: "*"
          PolicyName: AllPermissions
      RoleName: CanaryCodePipelineRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt CodePipelineExecutionRole.Arn
      Stages:
        - Actions:
          - ActionTypeId:
              Category: Source
              Owner: ThirdParty
              Provider: GitHub
              Version: '1'
            Configuration:
              Owner: ZhangMaKe
              Repo: CanaryLambda
              Branch: master
              OAuthToken: '463d6edc736312c3ef4cb16af42d5436c8010b80'
              PollForSourceChanges: false
            Name: Source 
            OutputArtifacts:
              - Name: source
          Name: Source
        - Actions:
          - ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: '1'
            Configuration:
              OutputFileName: pipelineStackOutput.json
              Capabilities: 'CAPABILITY_NAMED_IAM'
              RoleArn: !GetAtt CodePipelineExecutionRole.Arn
              StackName: Canary
              ActionMode: CREATE_UPDATE
              TemplatePath: source::poc.yml
            InputArtifacts:
              - Name: source
            RoleArn: !GetAtt CodePipelineExecutionRole.Arn
            RunOrder: 1
            Name: Stack
          Name: AdministerPipeline
      ArtifactStores:
        - ArtifactStore:
            Location: !Ref ArtifactBucket
            Type: S3
          Region: us-east-1
      Name: CanaryPipeline

  ArtifactBucket:
    Type: AWS::S3::Bucket